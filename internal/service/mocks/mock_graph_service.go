// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_graph_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/ZetoOfficial/neo4j-server/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGraphService is a mock of GraphService interface.
type MockGraphService struct {
	ctrl     *gomock.Controller
	recorder *MockGraphServiceMockRecorder
	isgomock struct{}
}

// MockGraphServiceMockRecorder is the mock recorder for MockGraphService.
type MockGraphServiceMockRecorder struct {
	mock *MockGraphService
}

// NewMockGraphService creates a new mock instance.
func NewMockGraphService(ctrl *gomock.Controller) *MockGraphService {
	mock := &MockGraphService{ctrl: ctrl}
	mock.recorder = &MockGraphServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphService) EXPECT() *MockGraphServiceMockRecorder {
	return m.recorder
}

// CreateNodeAndRelationship mocks base method.
func (m *MockGraphService) CreateNodeAndRelationship(ctx context.Context, req models.CreateNodeAndRelationshipRequest) (models.CreateNodeAndRelationshipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeAndRelationship", ctx, req)
	ret0, _ := ret[0].(models.CreateNodeAndRelationshipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeAndRelationship indicates an expected call of CreateNodeAndRelationship.
func (mr *MockGraphServiceMockRecorder) CreateNodeAndRelationship(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeAndRelationship", reflect.TypeOf((*MockGraphService)(nil).CreateNodeAndRelationship), ctx, req)
}

// DeleteNodeAndRelationships mocks base method.
func (m *MockGraphService) DeleteNodeAndRelationships(ctx context.Context, req models.DeleteNodeAndRelationshipsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeAndRelationships", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeAndRelationships indicates an expected call of DeleteNodeAndRelationships.
func (mr *MockGraphServiceMockRecorder) DeleteNodeAndRelationships(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeAndRelationships", reflect.TypeOf((*MockGraphService)(nil).DeleteNodeAndRelationships), ctx, req)
}

// GetAllNodes mocks base method.
func (m *MockGraphService) GetAllNodes(ctx context.Context) ([]models.GetAllNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNodes", ctx)
	ret0, _ := ret[0].([]models.GetAllNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNodes indicates an expected call of GetAllNodes.
func (mr *MockGraphServiceMockRecorder) GetAllNodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNodes", reflect.TypeOf((*MockGraphService)(nil).GetAllNodes), ctx)
}

// GetNodeWithRelationships mocks base method.
func (m *MockGraphService) GetNodeWithRelationships(ctx context.Context, req models.GetNodeWithRelationshipsRequest) ([]models.GetNodeWithRelationshipsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeWithRelationships", ctx, req)
	ret0, _ := ret[0].([]models.GetNodeWithRelationshipsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeWithRelationships indicates an expected call of GetNodeWithRelationships.
func (mr *MockGraphServiceMockRecorder) GetNodeWithRelationships(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeWithRelationships", reflect.TypeOf((*MockGraphService)(nil).GetNodeWithRelationships), ctx, req)
}
